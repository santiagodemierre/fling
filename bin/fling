#!/usr/bin/env python3
import sys, time, threading, argparse
from base64 import b64encode, b64decode
from socket import *

try:
    from cryptography.fernet import Fernet
    from cryptography.fernet import InvalidToken
    from cryptography.hazmat.backends import default_backend
    from cryptography.hazmat.primitives.hashes import Hash, SHA256
except:
    print("\nFailed to import cryptography module. Try using:")
    print("    sudo pip3 install cryptography\n")
    exit(1)


UDP_RECIEVE_PORT = 37001
UDP_SEND_PORT = 37002
TCP_LISTEN_PORT = 37004


def consume(produce):
    buffer = b''
    chunk = produce(1024)
    
    while (chunk):
        buffer += chunk
        chunk = produce(1024)

    return buffer


def sha256(data):
    digest = Hash(SHA256(), backend=default_backend())
    digest.update(data)
    return digest.finalize()

def encrypt(data, secret):
    key = b64encode(sha256(secret))
    fernet = Fernet(key)
    return fernet.encrypt(data)

def decrypt(data, secret):
    try:
        key = b64encode(sha256(secret))
        fernet = Fernet(key)
        return fernet.decrypt(data)
        
    except InvalidToken:
        print("Failed to decrypt message", file=sys.stderr)
        sys.exit(1)


def find(secret):
    sock = socket(AF_INET, SOCK_DGRAM)
    sock.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
    sock.bind(("0.0.0.0", UDP_RECIEVE_PORT))

    identifier = sha256(secret)

    while True:
        data, (addr, port) = sock.recvfrom(1024)

        if (data == identifier):
            return addr

def announce(secret):
    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)
    sock.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
    sock.bind(("0.0.0.0", UDP_SEND_PORT))

    identifier = sha256(secret)

    while True:
        sock.sendto(identifier, ('<broadcast>', UDP_RECIEVE_PORT))
        time.sleep(1)


def send(secret, addr):
    sender = socket()
    sender.connect((addr, TCP_LISTEN_PORT))

    plaintext = consume(sys.stdin.buffer.read)
    ciphertext = encrypt(plaintext, secret)
    sender.send(ciphertext)

    sender.shutdown(SHUT_RDWR)

def receive(secret):
    with socket() as server:
        server.bind(("", TCP_LISTEN_PORT))
        server.listen(1)

        receiver, addr = server.accept()

        ciphertext = consume(receiver.recv)
        plaintext = decrypt(ciphertext, secret)
        sys.stdout.buffer.write(plaintext)

        receiver.close()

def getargs():
    parser = argparse.ArgumentParser()
    parser.add_argument('--catch', action='store_true', help="Receive a file (default is send)")
    parser.add_argument('secret', help="A shared encryption secret for the flinged file")
    return parser.parse_args()

def main():
    args = getargs()
    mode = 'catch' if args.catch else 'fling'
    secret = args.secret.encode('utf-8')

    if mode == 'fling':
        send(secret, find(secret))
    else:
        threading.Thread(target=lambda: announce(secret), daemon=True).start()
        receive(secret)


main()
